package edu.ntnu.service;

import edu.ntnu.dto.QuizDTO;
import edu.ntnu.dto.questions.QuestionDTO;
import edu.ntnu.mapper.QuizMapper;
import edu.ntnu.model.Quiz;
import edu.ntnu.model.questions.MultipleChoiceQuestion;
import edu.ntnu.model.questions.TextInputQuestion;
import edu.ntnu.repository.QuizRepository;
import edu.ntnu.repository.questions.MultipleChoiceQuestionRepository;
import edu.ntnu.repository.questions.TextInputQuestionRepository;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

@Service
public class QuizService {
  private final QuizRepository quizRepository;
  private final MultipleChoiceQuestionRepository multipleChoiceQuestionRepository;
  private final TextInputQuestionRepository textInputQuestionRepository;
  private final QuestionService questionService;
  private final QuizMapper quizMapper;
  private final Logger logger = Logger.getLogger(QuizService.class.getName());

  @Autowired
  public QuizService(
      QuizRepository quizRepository,
      MultipleChoiceQuestionRepository multipleChoiceQuestionRepository,
      TextInputQuestionRepository textInputQuestionRepository,
      QuizMapper quizMapper,
      QuestionService questionService)
  {
    this.quizRepository = quizRepository;
    this.multipleChoiceQuestionRepository = multipleChoiceQuestionRepository;
    this.textInputQuestionRepository = textInputQuestionRepository;
    this.quizMapper = quizMapper;
    this.questionService = questionService;
  }

  public ResponseEntity<QuizDTO> getQuiz(Long quizId) {
   try {
    Quiz quiz = quizRepository.findByQuizId(quizId);
    QuizDTO quizDTO = quizMapper.toQuizDTO(quiz);

    if (quizDTO != null) {
      logger.info("Quiz with id " + quizId + " found. Returning quiz.");
      return ResponseEntity.ok(quizDTO);
    } else {
      logger.info("Quiz with id " + quizId + " not found.");
      return ResponseEntity.notFound().build();
    }
  } catch (Exception e) {
    logger.severe("An error occurred while getting quiz with id " + quizId + ": " + e.getMessage());
    return ResponseEntity.status(500).build();
  }
  }

  public ResponseEntity<Iterable<QuizDTO>> getAllQuizzes(String username) {
    try {
      // Get all quizzes from the database
      Iterable<Quiz> quizzes = quizRepository.findAllByUser_Username(username);

      if (quizzes != null) {
        // Convert quizzes to DTOs
        List<QuizDTO> quizDTOs = new ArrayList<>();
        for (Quiz quiz : quizzes) {
          quizDTOs.add(quizMapper.toQuizDTO(quiz));
        }

        int numQuizzes = quizDTOs.size();
        logger.info(numQuizzes + " quizzes found. Returning quizzes.");
        return ResponseEntity.ok(quizDTOs);
      } else {
        logger.info("No quizzes found.");
        return ResponseEntity.notFound().build();
      }
    } catch (Exception e) {
      logger.severe("An error occurred while getting all quizzes: " + e.getMessage());
      return ResponseEntity.status(500).build();
    }
  }

  public ResponseEntity<QuizDTO> createQuiz(QuizDTO quizDTO) {
    try {
      // Map DTO to entity without ID. ID is generated by database.
      Quiz quiz = quizMapper.toQuizWithoutId(quizDTO);

      // Save quiz to database
      Quiz savedQuiz = quizRepository.save(quiz);

      // Save questions associated with the quiz to the database
      List<QuestionDTO> questions = quizDTO.getQuestions();
      if (questions != null) {
        for (QuestionDTO questionDTO : questions) {
          questionService.createQuestion(questionDTO);
        }
      }

      logger.info("Quiz \"" + quiz.getQuizName() + "\" created successfully.");
      return ResponseEntity.ok(quizMapper.toQuizDTO(savedQuiz));
    } catch (Exception e) {
      logger.severe("An error occurred while creating quiz: " + e.getMessage());
      return ResponseEntity.status(500).build();
    }
  }

  public ResponseEntity<String> deleteQuiz(Long quizId) {
    try {
      deleteQuizFromQuizId(quizId);
      logger.info("Quiz with id " + quizId + " deleted successfully.");
      return ResponseEntity.ok("Quiz deleted successfully.");
    } catch (Exception e) {
      logger.severe("An error occurred while deleting quiz with id " + quizId + ": " + e.getMessage());
      return ResponseEntity.status(500).build();
    }
  }

  public void deleteQuizFromQuizId(Long quizId) {
    try {
      // Delete questions associated with the quiz
      List<MultipleChoiceQuestion> multipleChoiceQuestions = (List<MultipleChoiceQuestion>) multipleChoiceQuestionRepository.findAllByQuiz_QuizId(quizId);
      List<TextInputQuestion> textInputQuestions = (List<TextInputQuestion>) textInputQuestionRepository.findAllByQuiz_QuizId(quizId);

      if (multipleChoiceQuestions != null) {
        multipleChoiceQuestionRepository.deleteAll(multipleChoiceQuestions);
      }
      if (textInputQuestions != null) {
        textInputQuestionRepository.deleteAll(textInputQuestions);
      }

      // Delete quiz
      quizRepository.deleteByQuizId(quizId);
    } catch (Exception e) {
      logger.severe("An error occurred while deleting quiz with id " + quizId + ": " + e.getMessage());
      throw e;
    }
  }
}
